<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/dev/jacob</title>
    <link>http://jacobbridges.github.io/index.xml</link>
    <description>Recent content on /dev/jacob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Jan 2017 11:06:01 -0600</lastBuildDate>
    <atom:link href="http://jacobbridges.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>jupyter notebook with interactive charts</title>
      <link>http://jacobbridges.github.io/post/jupyter-notebook-with-interactive-charts/</link>
      <pubDate>Mon, 30 Jan 2017 11:06:01 -0600</pubDate>
      
      <guid>http://jacobbridges.github.io/post/jupyter-notebook-with-interactive-charts/</guid>
      <description>

&lt;script src=&#34;https://code.highcharts.com/highcharts.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://code.highcharts.com/modules/exporting.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://code.jquery.com/jquery-3.1.1.min.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I want beautiful, interactive charts in my Jupyter notebook.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just yesterday I was playing with some data in a Jupyter notebook and making some charts with matplotlib when this thought came to me: &amp;ldquo;Wouldn&amp;rsquo;t it be nice if I could generate interactieve charts in my notebook? Like those beautiful Javascript charts you see on every admin template..&amp;rdquo;&lt;/p&gt;

&lt;p&gt;It is possible. Let me show you a whole new beautiful world!&lt;/p&gt;

&lt;h3 id=&#34;highcharts&#34;&gt;Highcharts&lt;/h3&gt;

&lt;p&gt;Highcharts is a Javascript library that makes attractive, interactive charts from minimal code. Example:&lt;/p&gt;

&lt;div id=&#34;container&#34; style=&#34;min-width: 310px; height: 400px; margin: 0 auto&#34;&gt;&lt;/div&gt;

&lt;script&gt;
$(function () {
    Highcharts.chart(&#39;container&#39;, {
        title: {
            text: &#39;Monthly Average Temperature&#39;,
            x: -20 //center
        },
        subtitle: {
            text: &#39;Source: WorldClimate.com&#39;,
            x: -20
        },
        xAxis: {
            categories: [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,
                &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;]
        },
        yAxis: {
            title: {
                text: &#39;Temperature (째C)&#39;
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: &#39;#808080&#39;
            }]
        },
        tooltip: {
            valueSuffix: &#39;째C&#39;
        },
        legend: {
            layout: &#39;vertical&#39;,
            align: &#39;right&#39;,
            verticalAlign: &#39;middle&#39;,
            borderWidth: 0
        },
        series: [{
            name: &#39;Tokyo&#39;,
            data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
        }, {
            name: &#39;New York&#39;,
            data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
        }, {
            name: &#39;Berlin&#39;,
            data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
        }, {
            name: &#39;London&#39;,
            data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
        }]
    });
});
&lt;/script&gt;

&lt;p&gt;Isn&amp;rsquo;t it great? Animations, tooltips on mouse hover, and exporting to image are just a few features of this great library. Its only dependency is jQuery which Jupyter loads by default. The chart above is Highchart&amp;rsquo;s &lt;a href=&#34;http://jsfiddle.net/gh/get/jquery/3.1.1/highslide-software/highcharts.com/tree/master/samples/highcharts/demo/line-basic/&#34;&gt;Line Chart&lt;/a&gt; example which is the same chart I will be creating in my Jupyter notebook.&lt;/p&gt;

&lt;h3 id=&#34;jupyter-and-js&#34;&gt;Jupyter and JS&lt;/h3&gt;

&lt;p&gt;Jupyter uses &lt;a href=&#34;http://requirejs.org/&#34;&gt;requirejs&lt;/a&gt; to manage its Javascript libraries, which means we can &amp;ldquo;require&amp;rdquo; Highcharts into the notebook by adding the following code into a cell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;%%javascript
require.config({
  paths: {
    highcharts: &amp;quot;http://code.highcharts.com/highcharts&amp;quot;,
    highcharts_exports: &amp;quot;http://code.highcharts.com/modules/exporting&amp;quot;,
  },
  shim: {
    highcharts: {
      exports: &amp;quot;Highcharts&amp;quot;,
      deps: [&amp;quot;jquery&amp;quot;]
    },
    highcharts_exports: {
      exports: &amp;quot;Highcharts&amp;quot;,
      deps: [&amp;quot;highcharts&amp;quot;]
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the Highcharts library does not expose itself according to the requirejs standard, I have made it into a shim. The feature to export charts as images is loaded from a separate module in the Highcharts &lt;a href=&#34;http://code.highcharts.com/&#34;&gt;source&lt;/a&gt;, so I had to load it as a separate shim and make the main library a dependency.&lt;/p&gt;

&lt;h3 id=&#34;python-to-javascript&#34;&gt;Python to Javascript&lt;/h3&gt;

&lt;p&gt;To translate the data from the Python realm into the Javascript realm felt a little &amp;ldquo;hacky&amp;rdquo;, so bear with me and include the following code in a new cell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
from IPython.display import Javascript

chart_data = [
  {
    &#39;name&#39;: &#39;Tokyo&#39;,
    &#39;data&#39;: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
  }, 
  {
    &#39;name&#39;: &#39;New York&#39;,
    &#39;data&#39;: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
  }, 
  {
    &#39;name&#39;: &#39;Berlin&#39;,
    &#39;data&#39;: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
  }, 
  {
    &#39;name&#39;: &#39;London&#39;,
    &#39;data&#39;: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
  }
]

Javascript(&amp;quot;window.chartData={};&amp;quot;.format(json.dumps(chart_data)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes the Python variable &lt;code&gt;chart_data&lt;/code&gt; and binds it to Javascript&amp;rsquo;s global &lt;code&gt;window&lt;/code&gt; variable as &lt;code&gt;window.chartData&lt;/code&gt;. This feels hacky &amp;ndash; manually loading Javascript and binding to a global &amp;ndash; but it works. If anyone has a prettier method please tweet me (&lt;a href=&#34;http://twitter.com/codeweavr&#34;&gt;@codeweavr&lt;/a&gt;) and I will edit this post with your recommendations.&lt;/p&gt;

&lt;h1 id=&#34;the-graph&#34;&gt;The Graph&lt;/h1&gt;

&lt;p&gt;To display the graph, I used the %%Javascript cell magic method and used the Highcharts demo code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;%%javascript
// Since I append the div later, sometimes there are multiple divs.
$(&amp;quot;#container&amp;quot;).remove();

// Make the cdiv to contain the chart.
element.append(&#39;&amp;lt;div id=&amp;quot;container&amp;quot; style=&amp;quot;min-width: 310px; height: 400px; margin: 0 auto&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#39;);

// Require highcarts and make the chart.
require([&#39;highcharts_exports&#39;], function(Highcharts) {
    $(&#39;#container&#39;).highcharts({
        title: {
            text: &#39;Monthly Average Temperature&#39;,
            x: -20 //center
        },
        subtitle: {
            text: &#39;Source: WorldClimate.com&#39;,
            x: -20
        },
        xAxis: {
            categories: [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;, &#39;May&#39;, &#39;Jun&#39;,
                &#39;Jul&#39;, &#39;Aug&#39;, &#39;Sep&#39;, &#39;Oct&#39;, &#39;Nov&#39;, &#39;Dec&#39;]
        },
        yAxis: {
            title: {
                text: &#39;Temperature (째C)&#39;
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: &#39;#808080&#39;
            }]
        },
        tooltip: {
            valueSuffix: &#39;째C&#39;
        },
        legend: {
            layout: &#39;vertical&#39;,
            align: &#39;right&#39;,
            verticalAlign: &#39;middle&#39;,
            borderWidth: 0
        },
        // This is where I used the chart_data from Python
        series: window.chartData
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;external-references&#34;&gt;External References&lt;/h2&gt;

&lt;p&gt;You can see my Juypter notebook as a &lt;a href=&#34;https://gist.github.com/jacobbridges/52b88708f9757ef799083528ebcf433b&#34;&gt;gist&lt;/a&gt; and as a &lt;a href=&#34;https://nbviewer.jupyter.org/urls/gist.githubusercontent.com/jacobbridges/52b88708f9757ef799083528ebcf433b/raw/2ba0d1405c204f3c9eb07664f65a9889d200c4c3/highcharts_example_with_jquery.ipynb&#34;&gt;rendered notebook&lt;/a&gt;. (The nbviewer project does not load all the libraries and css modules that Jupyter loads, so I had to include jquery as well in the require js cell. You may also notice the chart looks small or oddly shaped &amp;ndash; this won&amp;rsquo;t happen on your local instance of jupyter.)&lt;/p&gt;

&lt;h4 id=&#34;articles&#34;&gt;Articles&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/8186027/loading-highcharts-with-require-js&#34;&gt;StackOverflow - Loading Highcharts with Requirejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.thedataincubator.com/2015/08/embedding-d3-in-an-ipython-notebook/&#34;&gt;The Data Incubator - Embedding d3.js in a iPython Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;docs&#34;&gt;Docs&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jupyter.readthedocs.io/en/latest/&#34;&gt;Jupyter Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.highcharts.com/docs&#34;&gt;Highcharts Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>unit testing with asyncio</title>
      <link>http://jacobbridges.github.io/post/unit-testing-with-asyncio/</link>
      <pubDate>Thu, 26 Jan 2017 00:28:12 -0600</pubDate>
      
      <guid>http://jacobbridges.github.io/post/unit-testing-with-asyncio/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# One method on this class is an asyncio coroutine.
class PersonClass(object):

    def __init__(self, name=None, cursor=None):
        &amp;quot;&amp;quot;&amp;quot;Constructor for PersonClass.&amp;quot;&amp;quot;&amp;quot;
        self.name = name
        self.cursor = cursor
        self.insert_sql = &#39;INSERT INTO person VALUES ?;&#39;

    async def create(self):  # ....HOW TO TEST THIS METHOD??
        &amp;quot;&amp;quot;&amp;quot;Persist the person to the database.&amp;quot;&amp;quot;&amp;quot;
        return await self.cursor.execute(self.insert_sql, (self.name,))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing and even stubbing asyncio code can be confusing. And frustrating. I spent an embarrassing four hours yesterday trying to unit test my async/await code. After much googling (and screaming) I discovered two methods that are both neat and clean.&lt;/p&gt;

&lt;h3 id=&#34;my-environment&#34;&gt;My Environment&lt;/h3&gt;

&lt;p&gt;Inspiration for writing this article comes from my project &lt;a href=&#34;https://github.com/jacobbridges/veggiecron-server&#34;&gt;veggiecron-server&lt;/a&gt;, which is written with async/await syntax from Python 3.5 and 3.6. For testing I am using &lt;a href=&#34;http://doc.pytest.org/en/latest/&#34;&gt;pytest&lt;/a&gt; as the test runner and &lt;a href=&#34;https://docs.python.org/3/library/unittest.mock.html#magicmock-and-magic-method-support&#34;&gt;MagicMock&lt;/a&gt; for stubbing. I also highly recommend the pytest plugin &lt;a href=&#34;https://github.com/pytest-dev/pytest-asyncio&#34;&gt;pytest-asyncio&lt;/a&gt; which reduces the event loop boilerplate code needed for each asynchronous test.&lt;/p&gt;

&lt;h3 id=&#34;with-unittest-testclass&#34;&gt;With &lt;code&gt;unittest.TestClass&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio

from unittest import TestCase
from unittest.mock import MagicMock

from src.person import PersonClass

class TestPersonClass(TestCase):

    def test_send_query_on_create(self):
        &amp;quot;&amp;quot;&amp;quot;Should send insert query to database on create()&amp;quot;&amp;quot;&amp;quot;

        event_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(event_loop)

        async def run_test():

            # Stub the database cursor
            database_cursor = MagicMock()

            # Stub the execute function with mocked results from the database
            execute_stub = MagicMock(return_value=&#39;future result!&#39;)
            # Wrap the stub in a coroutine (so it can be awaited)
            execute_coro = asyncio.coroutine(execute_stub)
            database_cursor.execute = execute_coro

            # Instantiate new person obj
            person = PersonClass(name=&#39;Johnny&#39;, cursor=database_cursor)

            # Call person.create() to trigger the database call
            person_create_response = await person.create()

            # Assert the response from person.create() is our predefined future
            assert person_create_response == &#39;future result!&#39;
            # Assert the database cursor was called once
            execute_stub.assert_called_once_with(person.insert_sql, (&#39;Johnny&#39;,))

        # Run the async test
        coro = asyncio.coroutine(run_test)
        event_loop.run_until_complete(coro())
        event_loop.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is one of the simplest ways to test asynchronous code without external dependencies. What is going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new event loop should be created for every test, otherwise it could become a point of mutated state across multiple tests and cause strange issues.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; can only be called from a function marked with &lt;code&gt;async&lt;/code&gt;, so a coroutine must be created inside the test function to await the function call &lt;code&gt;person.create()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Again, I cannot &lt;code&gt;await run_test()&lt;/code&gt; in the test function so I transform it into a coroutine object that I can send directly to the event loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;with-pytest-mark-asyncio&#34;&gt;With &lt;code&gt;pytest.mark.asyncio&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio
import pytest

from unittest.mock import MagicMock

from my_code import PersonClass

class TestPersonClass(object):

    @pytest.mark.asyncio
    async def test_send_query_on_create(self):
        &amp;quot;&amp;quot;&amp;quot;Should send insert query to database on create()&amp;quot;&amp;quot;&amp;quot;

        # Stub the database cursor
        database_cursor = MagicMock()

        # Stub the execute function with mocked results from the database
        execute_stub = MagicMock(return_value=&#39;future result!&#39;)
        # Wrap the stub in a coroutine (so it can be awaited)
        execute_coro = asyncio.coroutine(execute_stub)
        database_cursor.execute = execute_coro

        # Instantiate new person obj
        person = PersonClass(name=&#39;Johnny&#39;, cursor=database_cursor)

        # Call person.create() to trigger the database call
        person_create_response = await person.create()

        # Assert the response from person.create() is our predefined future
        assert person_create_response == &#39;future result!&#39;
        # Assert the database cursor was called once
        execute_stub.assert_called_once_with(person.insert_sql, (&#39;Johnny&#39;,))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is much cleaner, and resembles any other unit test in the project. No setting up event loops or managing coroutines. Just one decorator and we are gold.&lt;/p&gt;

&lt;h4 id=&#34;important-danger-exterminate&#34;&gt;Important! Danger! EXTERMINATE!!&lt;/h4&gt;

&lt;p&gt;Please take note in the above code that &lt;code&gt;TestPersonClass&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a child class of &lt;code&gt;unittest.TestCase&lt;/code&gt;. If it was, the test would still succeed &amp;ndash; but the success would be a false positive because code after the &lt;code&gt;await&lt;/code&gt; expression would not run.&lt;/p&gt;

&lt;p&gt;Why is this happening? The answer is complex enough that it deserves a separate post, but the tl;dr version is that on &lt;a href=&#34;https://github.com/pytest-dev/pytest-asyncio/blob/master/pytest_asyncio/plugin.py#L93&#34;&gt;line 93&lt;/a&gt; of pytest-asyncio&amp;rsquo;s &lt;a href=&#34;https://github.com/pytest-dev/pytest-asyncio&#34;&gt;source&lt;/a&gt; the author is expecting the event loop to be passed into the test from a pytest &lt;a href=&#34;http://doc.pytest.org/en/latest/fixture.html&#34;&gt;fixture&lt;/a&gt;, while &lt;code&gt;unittest.TestCase&lt;/code&gt; methods cannot directly receive fixture function arguments. Whew.&lt;/p&gt;

&lt;h2 id=&#34;external-references&#34;&gt;External References&lt;/h2&gt;

&lt;h4 id=&#34;articles&#34;&gt;Articles&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stefan.sofa-rockers.org/2016/03/10/advanced-asyncio-testing/&#34;&gt;Stefan Scherfke - Advanced asyncio testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/23033939/how-to-test-python-3-4-asyncio-code&#34;&gt;StackOverflow - How to test Python 3.4 asyncio code?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;docs&#34;&gt;Docs&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.pytest.org/en/latest/contents.html#toc&#34;&gt;pytest docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pytest-asyncio&#34;&gt;pytest-asyncio (pytest plugin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;Python unittest module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>how many seconds until midnight?</title>
      <link>http://jacobbridges.github.io/post/how-many-seconds-until-midnight/</link>
      <pubDate>Sun, 22 Jan 2017 21:19:31 -0600</pubDate>
      
      <guid>http://jacobbridges.github.io/post/how-many-seconds-until-midnight/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/sivh5Fe.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A countdown of victims that will end at midnight unless our dear Dark Knight stops me first!&amp;rdquo;
- &lt;strong&gt;Joker&lt;/strong&gt; in &lt;a href=&#34;http://www.imdb.com/title/tt0519694/&#34;&gt;&lt;em&gt;Holiday Knights&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine you need to know the number of seconds from now until midnight. It could help Batman save Gotham. It could also help a web developer (like me) cache some data in Redis that should self-destruct at the end of the day. How would you do it?&lt;/p&gt;

&lt;h3 id=&#34;my-solution&#34;&gt;My Solution&lt;/h3&gt;

&lt;p&gt;As always, I turn to Python. But it doesn&amp;rsquo;t solve my problem instantly. Python has many ways to deal with date math &amp;ndash; should I use &lt;a href=&#34;https://docs.python.org/3/library/datetime.html#datetime-objects&#34;&gt;datetime&lt;/a&gt;? &lt;a href=&#34;https://docs.python.org/3/library/datetime.html#date-objects&#34;&gt;date&lt;/a&gt;? &lt;a href=&#34;https://docs.python.org/3/library/datetime.html#time-objects&#34;&gt;time&lt;/a&gt;? &lt;a href=&#34;https://docs.python.org/3/library/datetime.html#timedelta-objects&#34;&gt;timedelta&lt;/a&gt;? An external library like &lt;a href=&#34;https://dateutil.readthedocs.io/en/stable/&#34;&gt;dateutil&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, for best readability, I decided on a mixture that is pure Python with no external modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, timedelta

def how_many_seconds_until_midnight():
    &amp;quot;&amp;quot;&amp;quot;Get the number of seconds until midnight.&amp;quot;&amp;quot;&amp;quot;
    tomorrow = datetime.now() + timedelta(1)
    midnight = datetime(year=tomorrow.year, month=tomorrow.month, 
                        day=tomorrow.day, hour=0, minute=0, second=0)
    return (midnight - datetime.now()).seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, if you want to remove the timedelta dependency and just use math:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime

def how_many_seconds_until_midnight():
    &amp;quot;&amp;quot;&amp;quot;Get the number of seconds until midnight.&amp;quot;&amp;quot;&amp;quot;
    n = datetime.now()
    return ((24 - n.hour - 1) * 60 * 60) + ((60 - n.minute - 1) * 60) + (60 - n.second)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>django tag for placeholder.it</title>
      <link>http://jacobbridges.github.io/post/custom-django-tag-placeholder-images/</link>
      <pubDate>Fri, 20 May 2016 21:03:05 -0400</pubDate>
      
      <guid>http://jacobbridges.github.io/post/custom-django-tag-placeholder-images/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;In the past few weeks I have been using Django to build a website for my local church. The project&amp;rsquo;s early conception required rapid prototyping of the UI, and I found myself using &lt;a href=&#34;http://placehold.it&#34;&gt;placeholder images&lt;/a&gt; in many places.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img src=&amp;quot;http://placehold.it/350x150&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;a-custom-tag&#34;&gt;A Custom Tag&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# project/app/templatetags/webextras.py
from django import template

register = template.Library()

@register.simple_tag
def fake_img(width, height):
    return &#39;https://placehold.it/{}x{}&#39;.format(width, height)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more info on custom tags, read the &lt;a href=&#34;https://docs.djangoproject.com/en/1.8/howto/custom-template-tags/&#34;&gt;Django docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, to use the new tag in my templates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- At top of template --&amp;gt;
{% load fake_img from webextras %}

&amp;lt;!-- ... --&amp;gt;

&amp;lt;img src=&amp;quot;{% fake_img 350 150 %}&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
&amp;lt;!-- Easily replaced with a static method call later. --&amp;gt;
&amp;lt;img src=&amp;quot;{% static &#39;logo.png&#39; %}&amp;quot;&amp;gt;&amp;lt;/img&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>web scraping, threads, and queues</title>
      <link>http://jacobbridges.github.io/post/web-scraping-threads-and-queues/</link>
      <pubDate>Wed, 01 Jul 2015 00:06:10 -0400</pubDate>
      
      <guid>http://jacobbridges.github.io/post/web-scraping-threads-and-queues/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The Problem&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;urls = get_urls()  # len(urls) &amp;gt; 5000
for url in urls:
    r = requests.get(url)
    page = pyquery(r.text)
    data = page(&amp;quot;#data&amp;quot;).text()
    # do something with data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look familiar? This was my normal &amp;ldquo;quick fix&amp;rdquo; web scraping script in Python. You may prefer BeautifulSoup to PyQuery, but from all the StackOverflow questions I have read this bit of &amp;ldquo;quick fix&amp;rdquo; scraper code is very common.&lt;/p&gt;

&lt;p&gt;The problem is that code will take almost 4 hours to complete. By continuing to publish code like this, we are furthering the stereotype that Python is slow. By using a few extra lines of code, I will show you how to take that 4 hours and cut it down to less than 5 minutes.&lt;/p&gt;

&lt;h3 id=&#34;thread-it&#34;&gt;Thread It&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from threading import Thread
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.python.org/2/library/threading.html&#34;&gt;threading module&lt;/a&gt; is a deep well of power&amp;ndash;if you are not familiar with it I suggest you go to the extrenal references section at the bottom of this post. There are some great  posts, my favorite of these being the article by Doug Hellmann at &lt;a href=&#34;http://pymotw.com/2/about.html&#34;&gt;PyMOTW&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple scraper worker function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def scraper_worker(urls):
    for url in urls:
        r = requests.get(url)
        page = pyquery(r.text)
        data = page(&amp;quot;#data&amp;quot;).text()
        # do something with data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we send our new function a list of urls, it scrapes them. Ez-Pz.&lt;/p&gt;

&lt;p&gt;Now that we have a worker function, let&amp;rsquo;s create several &amp;ldquo;scraper workers&amp;rdquo; with the threading module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create 5 scraper workers
for i in range(5):
    t = Thread(target=scraper_worker, args=(urls, ))
    t.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See a problem with this? If we start 5 scraper workers and give all of them the full list of urls we want to scrape, each page will be scraped 5 times!&lt;/p&gt;

&lt;p&gt;One common way to fix this problem is by slicing the url list into chunks and feeding a different chunk to each worker. The workers will effectively scrape all the pages in &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt; the original time&amp;ndash;but there is a better way. A more efficient way.&lt;/p&gt;

&lt;h3 id=&#34;queue-it&#34;&gt;Queue It&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from Queue import Queue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Queue module has several built in queue data types to play with, but for this project I used the standard FIFO Queue.&lt;/p&gt;

&lt;p&gt;In Python, queues are thread safe. So we can push all the urls into the queue and share it with all the worker threads.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def scraper_worker(q):
    while not q.empty():
        url = q.get()
        r = requests.get(url)
        page = pyquery(r.text)
        data = page(&amp;quot;#data&amp;quot;).text()
        # do something with data
        q.task_done()

# Create a queue and fill it
q = Queue()
map(q.put, urls)

# Create 5 scraper workers
for i in range(5):
    t = Thread(target=scraper_worker, args=(q, ))
    t.start()
q.join()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; The &lt;code&gt;q.join&lt;/code&gt; on the last line is very important. It causes the program to wait for the queue to be emptied before exiting.&lt;/p&gt;

&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;Comparing results is mind blowing. The linear (n00b) scraping method takes over an hour to scrape 5000 pages, and the threaded + queues method takes &lt;em&gt;less than three minutes&lt;/em&gt;. *&lt;/p&gt;

&lt;p&gt;So by adding a few more lines of code to that &amp;ldquo;quick fix&amp;rdquo; script, you could save hours of execution time.&lt;/p&gt;

&lt;p&gt;I &amp;lt;3 Python!&lt;/p&gt;

&lt;p&gt;&lt;sub&gt;* I ran the tests on my local machine, but not posting the actual results because threading relies greatly on the CPU and that differs for each environment.&lt;/sub&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;external-references&#34;&gt;External References&lt;/h3&gt;

&lt;h4 id=&#34;threading&#34;&gt;Threading&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://pymotw.com/2/threading/&#34;&gt;PyMOTW threading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lonelycode.com/2011/02/04/python-threading-and-queues-and-why-its-awesome/&#34;&gt;Python Threading and Queues - and why its awesome&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;queues&#34;&gt;Queues&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://pymotw.com/2/Queue/&#34;&gt;PyMOTW queues&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://jacobbridges.github.io/about/</link>
      <pubDate>Thu, 25 Jun 2015 00:06:10 -0400</pubDate>
      
      <guid>http://jacobbridges.github.io/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a Python enthusiast.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt; import antigravity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m a webscraping ninja.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bs4 import BeautifulSoup
import requests
import scrapy

# Something awesome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m a data geek.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.plotly as py
data = # ..graph data
layout = # ..plotly layout
fig = Figure(data=data, layout=layout)
py.plot(fig)
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
    &lt;a href=&#34;https://plot.ly/~vash0the0stampede/11/&#34; target=&#34;_blank&#34; title=&#34;Space vs. Spaaaaaace&#34; style=&#34;display: block; text-align: center;&#34;&gt;&lt;img src=&#34;https://plot.ly/~vash0the0stampede/11.png&#34; alt=&#34;Space vs. Spaaaaaace&#34; style=&#34;max-width: 100%;width: 770px;&#34;  width=&#34;770&#34; onerror=&#34;this.onerror=null;this.src=&#39;https://plot.ly/404.png&#39;;&#34; /&gt;&lt;/a&gt;
    &lt;script data-plotly=&#34;vash0the0stampede:11&#34; src=&#34;https://plot.ly/embed.js&#34; async&gt;&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>